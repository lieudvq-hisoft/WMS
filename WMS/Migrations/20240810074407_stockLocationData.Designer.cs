// <auto-generated />
using System;
using Data.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace WMS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240810074407_stockLocationData")]
    partial class stockLocationData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateUid");

                    b.HasIndex("WriteUid");

                    b.ToTable("ProductAttribute");
                });

            modelBuilder.Entity("Data.Entities.ProductAttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("CreateUid");

                    b.HasIndex("WriteUid");

                    b.ToTable("ProductAttributeValue");
                });

            modelBuilder.Entity("Data.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompleteName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ParentPath")
                        .HasColumnType("text");

                    b.Property<Guid?>("RemovalStrategyId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateUid");

                    b.HasIndex("ParentId");

                    b.HasIndex("RemovalStrategyId");

                    b.HasIndex("WriteUid");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("Data.Entities.ProductProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductTmplId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateUid");

                    b.HasIndex("ProductTmplId");

                    b.HasIndex("WriteUid");

                    b.ToTable("ProductProduct");
                });

            modelBuilder.Entity("Data.Entities.ProductRemoval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateUid");

                    b.HasIndex("WriteUid");

                    b.ToTable("ProductRemoval");
                });

            modelBuilder.Entity("Data.Entities.ProductTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CategId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DetailedType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tracking")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategId");

                    b.HasIndex("CreateUid");

                    b.HasIndex("UomId");

                    b.HasIndex("WriteUid");

                    b.ToTable("ProductTemplate");
                });

            modelBuilder.Entity("Data.Entities.ProductTemplateAttributeLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductTmplId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("CreateUid");

                    b.HasIndex("ProductTmplId");

                    b.HasIndex("WriteUid");

                    b.ToTable("ProductTemplateAttributeLine");
                });

            modelBuilder.Entity("Data.Entities.ProductTemplateAttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("AttributeLineId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductAttributeValueId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttributeLineId");

                    b.HasIndex("CreateUid");

                    b.HasIndex("ProductAttributeValueId");

                    b.HasIndex("WriteUid");

                    b.ToTable("ProductTemplateAttributeValue");
                });

            modelBuilder.Entity("Data.Entities.ProductVariantCombination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductTemplateAttributeValueId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateUid");

                    b.HasIndex("ProductProductId");

                    b.HasIndex("ProductTemplateAttributeValueId");

                    b.HasIndex("WriteUid");

                    b.ToTable("ProductVariantCombination");
                });

            modelBuilder.Entity("Data.Entities.ResPartner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateUid");

                    b.HasIndex("WriteUid");

                    b.ToTable("ResPartner");
                });

            modelBuilder.Entity("Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("003f7676-1d91-4143-9bfd-7a6c17c156fe"),
                            Description = "Role for Admin",
                            IsDeactive = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("7119a2e7-e680-4ecd-8344-0c53082cdc87"),
                            Description = "Role for Manager",
                            IsDeactive = false,
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("931c6340-f21a-4bbf-b71c-e39d7cebc997"),
                            Description = "Role for Staff",
                            IsDeactive = false,
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Data.Entities.StockLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("CompleteName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentPath")
                        .HasColumnType("text");

                    b.Property<Guid?>("RemovalStrategyId")
                        .HasColumnType("uuid");

                    b.Property<int>("Usage")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateUid");

                    b.HasIndex("LocationId");

                    b.HasIndex("RemovalStrategyId");

                    b.HasIndex("WriteUid");

                    b.ToTable("StockLocation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7d84e2e-39f3-4a8e-a5a5-8b8e839e7071"),
                            Active = true,
                            CompleteName = "Virtual Locations",
                            CreateDate = new DateTime(2024, 8, 10, 14, 44, 7, 317, DateTimeKind.Local).AddTicks(7310),
                            Name = "Virtual Locations",
                            ParentPath = "b7d84e2e-39f3-4a8e-a5a5-8b8e839e7071/",
                            Usage = 0,
                            WriteDate = new DateTime(2024, 8, 10, 14, 44, 7, 317, DateTimeKind.Local).AddTicks(7320)
                        },
                        new
                        {
                            Id = new Guid("d95a2d57-68a6-4f85-b6b3-d3eb2a5b73a6"),
                            Active = true,
                            CompleteName = "Virtual Locations / Inventory adjustment",
                            CreateDate = new DateTime(2024, 8, 10, 14, 44, 7, 317, DateTimeKind.Local).AddTicks(7390),
                            LocationId = new Guid("b7d84e2e-39f3-4a8e-a5a5-8b8e839e7071"),
                            Name = "Inventory adjustment",
                            ParentPath = "b7d84e2e-39f3-4a8e-a5a5-8b8e839e7071/d95a2d57-68a6-4f85-b6b3-d3eb2a5b73a6/",
                            Usage = 0,
                            WriteDate = new DateTime(2024, 8, 10, 14, 44, 7, 317, DateTimeKind.Local).AddTicks(7390)
                        },
                        new
                        {
                            Id = new Guid("e2a7c3e0-1a4d-43b6-95e1-123456789abc"),
                            Active = true,
                            CompleteName = "Physical Locations",
                            CreateDate = new DateTime(2024, 8, 10, 14, 44, 7, 317, DateTimeKind.Local).AddTicks(7410),
                            Name = "Physical Locations",
                            ParentPath = "e2a7c3e0-1a4d-43b6-95e1-123456789abc/",
                            Usage = 0,
                            WriteDate = new DateTime(2024, 8, 10, 14, 44, 7, 317, DateTimeKind.Local).AddTicks(7410)
                        },
                        new
                        {
                            Id = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            Active = true,
                            CompleteName = "Partners",
                            CreateDate = new DateTime(2024, 8, 10, 14, 44, 7, 317, DateTimeKind.Local).AddTicks(7420),
                            Name = "Partners",
                            ParentPath = "f47ac10b-58cc-4372-a567-0e02b2c3d479/",
                            Usage = 0,
                            WriteDate = new DateTime(2024, 8, 10, 14, 44, 7, 317, DateTimeKind.Local).AddTicks(7420)
                        },
                        new
                        {
                            Id = new Guid("6ba7b810-9dad-11d1-80b4-00c04fd430c8"),
                            Active = true,
                            CompleteName = "Partners / Vendors",
                            CreateDate = new DateTime(2024, 8, 10, 14, 44, 7, 317, DateTimeKind.Local).AddTicks(7430),
                            LocationId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            Name = "Vendors",
                            ParentPath = "f47ac10b-58cc-4372-a567-0e02b2c3d479/6ba7b810-9dad-11d1-80b4-00c04fd430c8/",
                            Usage = 3,
                            WriteDate = new DateTime(2024, 8, 10, 14, 44, 7, 317, DateTimeKind.Local).AddTicks(7430)
                        },
                        new
                        {
                            Id = new Guid("6ba7b180-9cad-11d1-80b4-00c04fd430c8"),
                            Active = true,
                            CompleteName = "Partners / Customers",
                            CreateDate = new DateTime(2024, 8, 10, 14, 44, 7, 317, DateTimeKind.Local).AddTicks(7440),
                            LocationId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            Name = "Customers",
                            ParentPath = "f47ac10b-58cc-4372-a567-0e02b2c3d479/6ba7b180-9cad-11d1-80b4-00c04fd430c8/",
                            Usage = 4,
                            WriteDate = new DateTime(2024, 8, 10, 14, 44, 7, 317, DateTimeKind.Local).AddTicks(7450)
                        });
                });

            modelBuilder.Entity("Data.Entities.StockLot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateUid");

                    b.HasIndex("WriteUid");

                    b.ToTable("StockLot");
                });

            modelBuilder.Entity("Data.Entities.StockMove", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<string>("DescriptionPicking")
                        .HasColumnType("text");

                    b.Property<Guid>("LocationDestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PickingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ProductQty")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductUomId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ProductUomQty")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReservationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateUid");

                    b.HasIndex("LocationDestId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PickingId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUomId");

                    b.HasIndex("WriteUid");

                    b.ToTable("StockMove");
                });

            modelBuilder.Entity("Data.Entities.StockMoveLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationDestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MoveId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductUomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuantId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("QuantityProductUom")
                        .HasColumnType("numeric");

                    b.Property<int?>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateUid");

                    b.HasIndex("LocationDestId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MoveId");

                    b.HasIndex("ProductUomId");

                    b.HasIndex("QuantId");

                    b.HasIndex("WriteUid");

                    b.ToTable("StockMoveLine");
                });

            modelBuilder.Entity("Data.Entities.StockPicking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("BackorderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateDeadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDone")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("LocationDestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PickingTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BackorderId");

                    b.HasIndex("CreateUid");

                    b.HasIndex("LocationDestId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PickingTypeId");

                    b.HasIndex("WriteUid");

                    b.ToTable("StockPicking");
                });

            modelBuilder.Entity("Data.Entities.StockPickingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<int>("CreateBackorder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ReturnPickingTypeTd")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateUid");

                    b.HasIndex("ReturnPickingTypeTd");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WriteUid");

                    b.ToTable("StockPickingType");
                });

            modelBuilder.Entity("Data.Entities.StockQuant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("InventoryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("InventoryDiffQuantity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("InventoryQuantity")
                        .HasColumnType("numeric");

                    b.Property<bool?>("InventoryQuantitySet")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateUid");

                    b.HasIndex("LocationId");

                    b.HasIndex("LotId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WriteUid");

                    b.ToTable("StockQuant");
                });

            modelBuilder.Entity("Data.Entities.StockWarehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LotStockId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ViewLocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhInputStockLocId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhOutputStockLocId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhPackStockLocId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WhQcStockLocId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateUid");

                    b.HasIndex("LotStockId");

                    b.HasIndex("ViewLocationId");

                    b.HasIndex("WhInputStockLocId");

                    b.HasIndex("WhOutputStockLocId");

                    b.HasIndex("WhPackStockLocId");

                    b.HasIndex("WhQcStockLocId");

                    b.HasIndex("WriteUid");

                    b.ToTable("StockWarehouse");
                });

            modelBuilder.Entity("Data.Entities.UomCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateUid");

                    b.HasIndex("WriteUid");

                    b.ToTable("UomCategory");
                });

            modelBuilder.Entity("Data.Entities.UomUom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateUid")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Factor")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Rounding")
                        .HasColumnType("numeric");

                    b.Property<string>("UomType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WriteUid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreateUid");

                    b.HasIndex("WriteUid");

                    b.ToTable("UomUom", t =>
                        {
                            t.HasCheckConstraint("uom_uom_factor_gt_zero", "\"Factor\" <> 0");

                            t.HasCheckConstraint("uom_uom_factor_reference_is_one", "((\"UomType\" = 'reference' AND \"Factor\" = 1.0) OR (\"UomType\" <> 'reference'))");

                            t.HasCheckConstraint("uom_uom_rounding_gt_zero", "\"Rounding\" > 0");
                        });
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<int>("CurrenNoticeCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FcmToken")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserAva")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c48fa0b7-47e0-4af2-bb56-3db9e29a7e8b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a12fe29-7fe8-41f3-9af2-54b1ca8d4207",
                            CurrenNoticeCount = 0,
                            DateCreated = new DateTime(2024, 8, 10, 14, 44, 7, 313, DateTimeKind.Local).AddTicks(6690),
                            DateUpdated = new DateTime(2024, 8, 10, 14, 44, 7, 313, DateTimeKind.Local).AddTicks(6690),
                            Email = "lieudvq0302@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "System",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Admin",
                            LockoutEnabled = true,
                            NormalizedEmail = "LIEUDVQ0302@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGAV0YwJmXtNmREj0oD2OX9feN5dC0WIPykTsTLuLhOCpJUPZSBQQww0K/IJ4v7NRw==",
                            PhoneNumber = "012345609",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "SMERHXAHGAGZWB7SKS2FZAH3PHQC7WXL",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Data.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c48fa0b7-47e0-4af2-bb56-3db9e29a7e8b"),
                            RoleId = new Guid("003f7676-1d91-4143-9bfd-7a6c17c156fe")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Entities.ProductAttribute", b =>
                {
                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("Data.Entities.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("ProductAttribute");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.ProductCategory", b =>
                {
                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.ProductCategory", "ParentCategory")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ParentId");

                    b.HasOne("Data.Entities.ProductRemoval", "ProductRemoval")
                        .WithMany("ProductCategories")
                        .HasForeignKey("RemovalStrategyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("ParentCategory");

                    b.Navigation("ProductRemoval");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.ProductProduct", b =>
                {
                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.ProductTemplate", "ProductTemplate")
                        .WithMany("ProductProducts")
                        .HasForeignKey("ProductTmplId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("ProductTemplate");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.ProductRemoval", b =>
                {
                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.ProductTemplate", b =>
                {
                    b.HasOne("Data.Entities.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("CategId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.UomUom", "UomUom")
                        .WithMany("ProductTemplates")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("ProductCategory");

                    b.Navigation("UomUom");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.ProductTemplateAttributeLine", b =>
                {
                    b.HasOne("Data.Entities.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductTemplateAttributeLines")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.ProductTemplate", "ProductTemplate")
                        .WithMany("ProductTemplateAttributeLines")
                        .HasForeignKey("ProductTmplId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("ProductAttribute");

                    b.Navigation("ProductTemplate");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.ProductTemplateAttributeValue", b =>
                {
                    b.HasOne("Data.Entities.ProductTemplateAttributeLine", "ProductTemplateAttributeLine")
                        .WithMany("ProductTemplateAttributeValues")
                        .HasForeignKey("AttributeLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.ProductAttributeValue", "ProductAttributeValue")
                        .WithMany("ProductTemplateAttributeValues")
                        .HasForeignKey("ProductAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("ProductAttributeValue");

                    b.Navigation("ProductTemplateAttributeLine");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.ProductVariantCombination", b =>
                {
                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.ProductProduct", "ProductProduct")
                        .WithMany("ProductVariantCombinations")
                        .HasForeignKey("ProductProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.ProductTemplateAttributeValue", "ProductTemplateAttributeValue")
                        .WithMany("ProductVariantCombinations")
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("ProductProduct");

                    b.Navigation("ProductTemplateAttributeValue");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.ResPartner", b =>
                {
                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.StockLocation", b =>
                {
                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.StockLocation", "ParentLocation")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Data.Entities.ProductRemoval", "RemovalStrategy")
                        .WithMany()
                        .HasForeignKey("RemovalStrategyId");

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("ParentLocation");

                    b.Navigation("RemovalStrategy");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.StockLot", b =>
                {
                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.StockMove", b =>
                {
                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.StockLocation", "LocationDest")
                        .WithMany()
                        .HasForeignKey("LocationDestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.StockLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.StockPicking", "StockPicking")
                        .WithMany("StockMoves")
                        .HasForeignKey("PickingId");

                    b.HasOne("Data.Entities.ProductProduct", "ProductProduct")
                        .WithMany("StockMoves")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.UomUom", "ProductUom")
                        .WithMany("StockMoves")
                        .HasForeignKey("ProductUomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("Location");

                    b.Navigation("LocationDest");

                    b.Navigation("ProductProduct");

                    b.Navigation("ProductUom");

                    b.Navigation("StockPicking");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.StockMoveLine", b =>
                {
                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.StockLocation", "LocationDest")
                        .WithMany()
                        .HasForeignKey("LocationDestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.StockLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.StockMove", "StockMove")
                        .WithMany("StockMoveLines")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.UomUom", "ProductUom")
                        .WithMany()
                        .HasForeignKey("ProductUomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.StockQuant", "StockQuant")
                        .WithMany("StockMoveLines")
                        .HasForeignKey("QuantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("Location");

                    b.Navigation("LocationDest");

                    b.Navigation("ProductUom");

                    b.Navigation("StockMove");

                    b.Navigation("StockQuant");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.StockPicking", b =>
                {
                    b.HasOne("Data.Entities.StockPicking", "Backorder")
                        .WithMany()
                        .HasForeignKey("BackorderId");

                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.StockLocation", "LocationDest")
                        .WithMany()
                        .HasForeignKey("LocationDestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.StockLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.ResPartner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("Data.Entities.StockPickingType", "PickingType")
                        .WithMany("StockPickings")
                        .HasForeignKey("PickingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("Backorder");

                    b.Navigation("CreateUser");

                    b.Navigation("Location");

                    b.Navigation("LocationDest");

                    b.Navigation("Partner");

                    b.Navigation("PickingType");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.StockPickingType", b =>
                {
                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.StockPickingType", "ReturnPickingType")
                        .WithMany()
                        .HasForeignKey("ReturnPickingTypeTd");

                    b.HasOne("Data.Entities.StockWarehouse", "Warehouse")
                        .WithMany("StockPickingTypes")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("ReturnPickingType");

                    b.Navigation("Warehouse");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.StockQuant", b =>
                {
                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.StockLocation", "StockLocation")
                        .WithMany("StockQuants")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.StockLot", "StockLot")
                        .WithMany()
                        .HasForeignKey("LotId");

                    b.HasOne("Data.Entities.ProductProduct", "ProductProduct")
                        .WithMany("StockQuants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("ProductProduct");

                    b.Navigation("StockLocation");

                    b.Navigation("StockLot");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.StockWarehouse", b =>
                {
                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.StockLocation", "LotStock")
                        .WithMany("LotStockWarehouses")
                        .HasForeignKey("LotStockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.StockLocation", "ViewLocation")
                        .WithMany("ViewStockWarehouses")
                        .HasForeignKey("ViewLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.StockLocation", "WhInputStockLoc")
                        .WithMany()
                        .HasForeignKey("WhInputStockLocId");

                    b.HasOne("Data.Entities.StockLocation", "WhOutputStockLoc")
                        .WithMany()
                        .HasForeignKey("WhOutputStockLocId");

                    b.HasOne("Data.Entities.StockLocation", "WhPackStockLoc")
                        .WithMany()
                        .HasForeignKey("WhPackStockLocId");

                    b.HasOne("Data.Entities.StockLocation", "WhQcStockLoc")
                        .WithMany()
                        .HasForeignKey("WhQcStockLocId");

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("LotStock");

                    b.Navigation("ViewLocation");

                    b.Navigation("WhInputStockLoc");

                    b.Navigation("WhOutputStockLoc");

                    b.Navigation("WhPackStockLoc");

                    b.Navigation("WhQcStockLoc");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.UomCategory", b =>
                {
                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("CreateUser");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.UomUom", b =>
                {
                    b.HasOne("Data.Entities.UomCategory", "Category")
                        .WithMany("UomUoms")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUid");

                    b.HasOne("Data.Entities.User", "WriteUser")
                        .WithMany()
                        .HasForeignKey("WriteUid");

                    b.Navigation("Category");

                    b.Navigation("CreateUser");

                    b.Navigation("WriteUser");
                });

            modelBuilder.Entity("Data.Entities.UserRole", b =>
                {
                    b.HasOne("Data.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.ProductAttribute", b =>
                {
                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductTemplateAttributeLines");
                });

            modelBuilder.Entity("Data.Entities.ProductAttributeValue", b =>
                {
                    b.Navigation("ProductTemplateAttributeValues");
                });

            modelBuilder.Entity("Data.Entities.ProductCategory", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Data.Entities.ProductProduct", b =>
                {
                    b.Navigation("ProductVariantCombinations");

                    b.Navigation("StockMoves");

                    b.Navigation("StockQuants");
                });

            modelBuilder.Entity("Data.Entities.ProductRemoval", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Data.Entities.ProductTemplate", b =>
                {
                    b.Navigation("ProductProducts");

                    b.Navigation("ProductTemplateAttributeLines");
                });

            modelBuilder.Entity("Data.Entities.ProductTemplateAttributeLine", b =>
                {
                    b.Navigation("ProductTemplateAttributeValues");
                });

            modelBuilder.Entity("Data.Entities.ProductTemplateAttributeValue", b =>
                {
                    b.Navigation("ProductVariantCombinations");
                });

            modelBuilder.Entity("Data.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Data.Entities.StockLocation", b =>
                {
                    b.Navigation("LotStockWarehouses");

                    b.Navigation("StockQuants");

                    b.Navigation("ViewStockWarehouses");
                });

            modelBuilder.Entity("Data.Entities.StockMove", b =>
                {
                    b.Navigation("StockMoveLines");
                });

            modelBuilder.Entity("Data.Entities.StockPicking", b =>
                {
                    b.Navigation("StockMoves");
                });

            modelBuilder.Entity("Data.Entities.StockPickingType", b =>
                {
                    b.Navigation("StockPickings");
                });

            modelBuilder.Entity("Data.Entities.StockQuant", b =>
                {
                    b.Navigation("StockMoveLines");
                });

            modelBuilder.Entity("Data.Entities.StockWarehouse", b =>
                {
                    b.Navigation("StockPickingTypes");
                });

            modelBuilder.Entity("Data.Entities.UomCategory", b =>
                {
                    b.Navigation("UomUoms");
                });

            modelBuilder.Entity("Data.Entities.UomUom", b =>
                {
                    b.Navigation("ProductTemplates");

                    b.Navigation("StockMoves");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
